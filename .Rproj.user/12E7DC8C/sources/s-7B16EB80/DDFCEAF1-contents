---
title: "Time Average Metrics for NFL Team Quality"
description: |
  An alternative to margin of victory that better reflects the path to the final result.
author:
  - name: Casey Caprini
date: 11-28-2021
output:
  distill::distill_article:
    self_contained: false
preview: no_tb_tal.png
---

Revised 12/22/2021 and 01/10/2022.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

library(tidyverse)
library(nflfastR)
library(ggimage)
library(nfltools)
library(nflplotR)
```

## What is a "time average lead"?

The <b>time average point lead for a game is a coarse-grained metric that summarizes its overall competitiveness</b>. 

Let's consider a simple example. In Week 15 of the 2021 season, the New Orleans Saints went to Tampa Bay and upset the Bucs, winning 9-0.

This example is simple because there were only three scoring plays. Also, since the Bucs were shut out, the New Orleans score is equal to the New Orleans lead throughout the game. (If New Orleans had trailed at some point in the game, their "lead" would have been a negative number for that part of the game.)

Let's look at a plot of the Saints shutout.

```{r echo=FALSE}
tb_color = teams_colors_logos %>%
  filter(team_abbr == "TB") %>%
  pull(team_color)

no_color_pri = teams_colors_logos %>%
  filter(team_abbr == "NO") %>%
  pull(team_color)

no_color_sec = teams_colors_logos %>%
  filter(team_abbr == "NO") %>%
  pull(team_color2)

no_tb_pbp <- load_pbp(2021) %>%
  filter(home_team == "TB" & away_team == "NO") %>%
  filter(sp == 1) %>%
  select(game_seconds_remaining, total_away_score, total_home_score)

sp_times <- no_tb_pbp %>%
  distinct(game_seconds_remaining) %>%
  pull(game_seconds_remaining)

temp_df <- data.frame(game_seconds_remaining = c(3600, 3600, sp_times, 0),
                      total_away_score = rep(NA, length(sp_times) + 3),
                      total_home_score = rep(NA, length(sp_times) + 3))

no_tb_pbp <- rbind(no_tb_pbp, temp_df) %>%
  arrange(desc(game_seconds_remaining),
          total_away_score, total_home_score)

for(i in 1:nrow(no_tb_pbp)){
  if(i %in% c(1,2)){
    no_tb_pbp$total_away_score[i] = 0
    no_tb_pbp$total_home_score[i] = 0
  }
  else{
    if(i == nrow(no_tb_pbp)){
      no_tb_pbp$total_away_score[i] = max(no_tb_pbp$total_away_score,
                                          na.rm = T)
      no_tb_pbp$total_home_score[i] = max(no_tb_pbp$total_home_score,
                                          na.rm = T)
    }
    else{
      if(is.na(no_tb_pbp$total_away_score[i]) == T){
        no_tb_pbp$total_away_score[i] = no_tb_pbp$total_away_score[i-3]
        no_tb_pbp$total_home_score[i] = no_tb_pbp$total_home_score[i-3]
      }
    }
  }
}

no_tb_pbp <- no_tb_pbp %>% 
  slice(2:nrow(no_tb_pbp)) %>%
  mutate(game_minutes = (3600 - game_seconds_remaining)/60) %>%
  arrange(game_minutes, total_away_score)

sp_mins = (3600 - sp_times)/60
sp_int_mins = rep(NA, length(sp_mins) + 1)
for(j in 1:length(sp_int_mins)){
  if(j == 1){
    sp_int_mins[j] = sp_mins[j] - 0
  }
  else{
    if(j == length(sp_int_mins)){
      sp_int_mins[j] = 60 - sp_mins[j-1]
    }
    else{
      sp_int_mins[j] = sp_mins[j] - sp_mins[j-1]
    }
  }
}
score_diff <- c(0, 3, 6, 9)
x_label <- rep(0, length(sp_mins) + 1)
k = 1
for(k in 1:length(x_label)){
  if(k == 1){
    x_label[k] = (0 + sp_mins[k])/2
  }
  else{
    if(k == length(x_label)){
      x_label[k] = (60 + sp_mins[k-1])/2
    }
    else{
      x_label[k] = (sp_mins[k-1] + sp_mins[k])/2
    }
  }
}

df_label <- data.frame(x_label = x_label,
                       y_label = score_diff,
                       interval_width = sp_int_mins,
                       interval_height = score_diff,
                       area = sp_int_mins * score_diff)
  
p_no_score <- no_tb_pbp %>%
  ggplot(aes(x = game_minutes,
             y = total_away_score)) +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = sum(df_label$area)/60,
             linetype = "dashed",
             size = 1.5,
             alpha = 0.3) +
  geom_vline(xintercept = c(0, 60)) +
  geom_vline(xintercept = sp_mins,
             linetype = "dashed") +
  geom_path(aes(y = total_home_score),
            color = tb_color,
            size = 1.5) +
  geom_path(color = no_color_sec,
            size = 1.5) +
  geom_ribbon(aes(ymin = 0,
                  ymax = total_away_score),
            fill = no_color_pri,
            alpha = 0.5) +
  geom_nfl_logos(aes(x = 60,
                     y = max(no_tb_pbp$total_away_score),
                     team_abbr = "NO"),
                 width = 0.08) +
  geom_nfl_logos(aes(x = 60,
                     y = max(no_tb_pbp$total_home_score),
                     team_abbr = "TB"),
                 width = 0.08) +                 
  theme_light() +
  scale_x_continuous(breaks = seq(from = 0, to = 60, by = 15),
                     minor_breaks = NULL) +
  scale_y_continuous(breaks = seq(from = 0, to = 60, by = 3),
                     minor_breaks = NULL) +
  labs(title = "NO 9, TB 0",
       subtitle = "2021 Season, Week 15",
       x = "Minutes Played",
       y = "Score") +
  geom_text(data = df_label %>%
              filter(area != 0),
            aes(x = x_label,
                y = y_label/2,
                label = round(area, 1))) +
  geom_text(aes(x = 35,
                y = (sum(df_label$area)/60) + 0.22,
                label = paste("Time Average Lead:",
                              round(sum(df_label$area)/60, 1),
                              "points")))

ggsave(filename = "no_tb_tal.png",
       plot = p_no_score,
       width = 5,
       height = 5.25,
       units = "in",
       dpi = "retina")

```

![](no_tb_tal.png)

The "time average lead" is just a weighted average of the team's leads throughout the game, weighted by the fraction of the game they held each lead. Geometrically, it is the sum of the area under the "lead" curve, divided by 60 minutes played. The plot is annotated to show the areas of the three lead intervals and the time average lead for the game.

## Why "time average" point differentials?

A few notable features of time average lead as a point-estimate game summary:

* The units of the metric is points, which is intuitive to football fans.
* For better or worse, the value of the metric relies on the assumption that a time average is informative. Time averages are often informative for processes that are at least partially path-dependent. A time average is just an average and therefore has the advantage of not relying on other modeling assumptions.

If you're curious, the 2021 NFL season time average results (and other derived metrics) can be found [here](https://caseycaprini.github.io/the_latest_numbers/2021-nfl-time-average-ranks.html).

### A few other concrete examples
Consider two more complex games from Week 1 of 2021.  

* PIT 23, BUF 16  
* SF 41, DET 33  

```{r week_1_examples, echo=FALSE}
example_1_id <- fast_scraper_schedules(2021) %>%
  filter(week == 1) %>%
  filter(home_team == "PIT" | away_team == "PIT") %>%
  pull(game_id)

pit_color <- teams_colors_logos %>%
  filter(team_abbr == "PIT") %>%
  pull(team_color)

pit_ex_mean_point_diff <- load_pbp(2021) %>%
  filter(game_id == example_1_id) %>%
  mvt_game("PIT") %>%
  pull(mean_point_diff) %>%
  round(1)

#PIT Win Prob Graph, Week 1
load_pbp(2021) %>%
  filter(game_id == example_1_id) %>%
  mutate(game_minutes = (3600 - game_seconds_remaining)/60) %>%
  filter(is.na(away_wp_post) == FALSE) %>%
  select(game_minutes, away_wp_post) %>%
  rbind(data.frame(game_minutes = 60,
                   away_wp_post = 1)) %>%
  ggplot(aes(x = game_minutes, y = away_wp_post)) +
  geom_hline(yintercept = 0.5,
             linetype = "dashed") +
  geom_vline(xintercept = c(0, 60),
             color = "black") +
  geom_vline(xintercept = c(15, 30, 45),
             color = "dark gray") +
  geom_line(color = pit_color) +
  scale_x_continuous(breaks = seq(from = 0, to = 60, by = 10)) +
  scale_y_continuous(breaks = seq(from = 0, to = 1, by = 0.2),
                     labels = scales::percent_format(accuracy = 1)) +
  theme_light() +
  labs(x = "Minutes Played",
       y = "PIT Win Probability",
       title = "Week 1: PIT 23-16 Win @ BUF") -> p_top

example_2_id <- fast_scraper_schedules(2021) %>%
  filter(home_team %in% c("SF", "DET") & away_team %in% c("SF", "DET")) %>%
  pull(game_id)

sf_color <- teams_colors_logos %>%
  filter(team_abbr == "SF") %>%
  pull(team_color)

sf_ex_mean_point_diff <- load_pbp(2021) %>%
  filter(game_id == example_2_id) %>%
  mvt_game("SF") %>%
  pull(mean_point_diff) %>%
  round(1)

#SF Win Prob Graph, Week 1
load_pbp(2021) %>%
  filter(game_id == example_2_id) %>%
  mutate(game_minutes = (3600 - game_seconds_remaining)/60) %>%
  filter(is.na(away_wp_post) == FALSE) %>%
  select(game_minutes, away_wp_post) %>%
  rbind(data.frame(game_minutes = 60,
                   away_wp_post = 1)) %>%
  ggplot(aes(x = game_minutes, y = away_wp_post)) +
  geom_hline(yintercept = 0.5,
             linetype = "dashed") +
  geom_vline(xintercept = c(0, 60),
             color = "black") +
  geom_vline(xintercept = c(15, 30, 45),
             color = "dark gray") +
  geom_line(color = sf_color) +
  scale_x_continuous(breaks = seq(from = 0, to = 60, by = 10)) +
  scale_y_continuous(breaks = seq(from = 0, to = 1, by = 0.2),
                     labels = scales::percent_format(accuracy = 1)) +
  theme_light() +
  labs(x = "Minutes Played",
       y = "SF Win Probability",
       title = "Week 1: SF 41-33 Win @ DET",
       caption = "Data and Win Probability via nflfastR") -> p_bottom

ggsave("pit_week_1_2021_win_prob.png",
       p_top,
       height = 4,
       width = 6,
       units = "in",
       dpi = "retina")
ggsave("sf_week_1_2021_win_prob.png",
       p_bottom,
       height = 4,
       width = 6,
       units = "in",
       dpi = "retina")
```

The margin of victory for the Steelers and the 49ers was very similar. However, the time average point differential is significantly different.

|Team  | Margin of Victory | Time Average Lead            |
|------|:-----------------:|:----------------------------:|
|PIT   | 7                 | `r pit_ex_mean_point_diff[1]`|
|SF    | 8                 | `r sf_ex_mean_point_diff[1]` |

Let's compare the Win Probability graph for the two games.

![](pit_week_1_2021_win_prob.png)

![](sf_week_1_2021_win_prob.png)


Despite the similar margin of victory for both teams, the Win Probability graphs reflect very different paths to the result.  

* The Steelers surged to take control in the 4th quarter, fueled by a Bills turnover on downs near midfield and a Pittsburgh TD on a blocked punt.  
* The Lions never threatened the 49ers until it was too late. Detroit scored two TDs and converted two 2-point conversions after the 2-minute warning in the 4th quarter. On top of defensive lapses, the 49ers allowed a successful onside kick and fumbled while trying to kill clock.  

The Steelers made big plays late to win a game they kept close, while the 49ers controlled the game until hilarity ensued inside of 2-minutes. The time average point differential better reflects the path these games took to the final outcome than the final margin of victory. 

## Recent NFL seasons
The following shows the distribution of time average game results (from the home team's perspective) for all regular season games in 2011 to 20202.
![](mean_point_diff_dist_2011_2020.png)

As expected,

* Most positive time average differentials result in wins, while most negative time average point differentials result in losses.
* There is evidence of a home team advantage: on average, home teams lead by ~1.4 points at any given point in regulation time for the decade considered of regular season games considered.

## Resources and sources of inspiration

Inspired by an Ole Peters talk on [Ergodicity Economics](https://youtu.be/LGqOH3sYmQA), I decided to investigate time averages in NFL games.  Like life, my prior is that a football game is path dependent. Game script matters. Play calling goals vary with game situation.  

At the time, I was reading 2021 NFL season previews and retrospectives on the 2020 season. The hypothesis was this: because of path dependence, time averages might enable better retrospective assessment of regular season team quality than season point differential and other aggregate metrics (e.g., [Pythagorean Win Expectation](https://en.wikipedia.org/wiki/Pythagorean_expectation)).  

I the most amateur of R users.  This post contains adapted code and inspiration from:

* The [tidyverse](https://www.tidyverse.org/).
* The [nflfastR](https://www.nflfastr.com/) of the nflverse.
* Tom Mock's excellent posts on [plotting images](https://themockup.blog/posts/2020-10-11-embedding-images-in-ggplot/) and [tables](https://jthomasmock.github.io/gtExtras/)  
* Shannon Pileggi's excellent blog post on [creating your own R package](https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour/).  